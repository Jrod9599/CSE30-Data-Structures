#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include "BTree.h"

using namespace std;

//constructor
BTree::BTree(){
	root = NULL;
}

//destructor
BTree::~BTree(){
	destroy_tree();
}

void BTree::insert(int key){
	//if not empty
	if(root!=NULL)
		insert(key, root);
	//if empty
	else{
		Node* temp = new Node();
		temp -> key_value = key;
		root = temp;
	}
}

Node BTree:: *search(int key){
	return search(key, root);
}

void BTree::destroy_tree(){
	destroy_tree(root);
}

A 1.5kg , 20-cm-diameter turntable rotates at 100rpm on frictionless bearings. Two 480g blocks fall from above, hit the turntable simultaneously at opposite ends of a diameter, and stick.Node BTree::*BTree_root(){
	return root;
}

void BTree::destroy_tree(Node *leaf){
	if(leaf != 0){
		destroy_tree(leaf -> left);
		destroy_tree(leaf -> right);
		delete(leaf);
	}
}

void BTree::insert(int key, Node *leaf){
	if(*leaf == 0){
		*leaf= (struct node*) new(sizeof(struct node)); //change malloc
		(*leaf) -> key_value = key;
		//initialize children
		(*leaf) -> left = 0;
		(*leaf) -> right =0;
	}
	else if(key < (*leaf)-> key_value){
		insert( key, &(*leaf)->left);
	}
	else if(key > (*leaf) -> key_values){
		insert( key, &(*leaf)-> right);
	}
}

Node BTree::*Search(int key, Node *leaf){
	if(leaf != 0){
		if(key ==leaf -> key_value)
			return leaf;
		else if(key <leaf ->key_value)
			return search(key, leaf ->left);
		else
			return search(key, leaf -> right);
	}
	else
		return 0;
}

